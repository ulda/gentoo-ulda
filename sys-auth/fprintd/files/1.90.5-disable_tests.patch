--- fprintd-v1.90.5/meson.build.orig	2020-12-06 10:20:53.323755353 +0100
+++ fprintd-v1.90.5/meson.build	2020-12-06 10:21:25.402733133 +0100
@@ -124,25 +124,25 @@
 polkit_policy_directory = polkit_gobject_dep.get_pkgconfig_variable('policydir')
 
 # Tests dependencies
-pam_wrapper_dep = dependency('pam_wrapper', required: get_option('pam'))
-
+#pam_wrapper_dep = dependency('pam_wrapper', required: get_option('pam'))
+#
 xmllint = find_program('xmllint', required: false)
 python3 = find_program('python3') # No meson without it!
-python3_test_modules = {
-    'cairo': true,
-    'dbus': true,
-    'dbusmock': true,
-    'gi': true,
-    'gi.repository.FPrint': true,
-    'pypamtest': get_option('pam'),
-}
-python3_available_modules = []
-
-foreach module, required : python3_test_modules
-    if required and run_command(python3, '-c', 'import @0@'.format(module)).returncode() != 0
-        error('Python3 module \'' + module + '\' required by test suite not found')
-    endif
-endforeach
+#python3_test_modules = {
+#    'cairo': true,
+#    'dbus': true,
+#    'dbusmock': true,
+#    'gi': true,
+#    'gi.repository.FPrint': true,
+#    'pypamtest': get_option('pam'),
+#}
+#python3_available_modules = []
+#
+#foreach module, required : python3_test_modules
+#    if required and run_command(python3, '-c', 'import @0@'.format(module)).returncode() != 0
+#        error('Python3 module \'' + module + '\' required by test suite not found')
+#    endif
+#endforeach
 
 cdata = configuration_data()
 cdata.set_quoted('GETTEXT_PACKAGE', meson.project_name())
@@ -166,7 +166,7 @@
 if get_option('gtk_doc')
     subdir('doc')
 endif
-subdir('tests')
+#subdir('tests')
 subdir('po')
 
 output = []
@@ -188,7 +188,7 @@
 output += '  Manuals: ' + get_option('man').to_string()
 output += '  GTK Doc: ' + get_option('gtk_doc').to_string()
 output += '  XML Linter ' + xmllint.found().to_string()
-output += '\nTest setup:\n'
-output += '  With address sanitizer: ' + address_sanitizer.to_string()
+#output += '\nTest setup:\n'
+#output += '  With address sanitizer: ' + address_sanitizer.to_string()
 
 message('\n'+'\n'.join(output)+'\n')
